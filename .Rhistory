split.cells = c(4, 8, 80),
use.hyphening=T)
pandoc.table(GenerFI[,c(1:2,5)],style = "grid",
plain.ascii = F,
justify = "left",
header.style="setext",
split.cells = c(4, 8, 80),
use.hyphening=T)
pandoc.table(GenerFI[,c(1:2,5)],style = "grid",
plain.ascii = F,
justify = "left",
header.style="setext",
split.cells = c(4, 8, 80),
use.hyphening=T,
caption = 'Only once after the first part!')
pandoc.table(GenerFI[,c(1:2,5)],style = "grid",
plain.ascii = F,
justify = "left",
header.style="setext",
split.cells = c(4, 8, 80),
use.hyphening=T,
caption = 'Enquête Lime Survey')
pandoc.table(GenerFI[,c(1:2,5)],style = "grid",
plain.ascii = F,
justify = "left",
header.style="setext",
keep.line.breaks=F,
use.hyphening=T,
caption = 'Enquête Lime Survey')
pandoc.table(GenerFI[,c(1:2,5)],style = "grid",
plain.ascii = F,
justify = "left",
header.style="setext",
keep.line.breaks=T,
use.hyphening=T,
caption = 'Enquête Lime Survey')
pandoc.table(GenerFI[,c(1:2,5)],style = "grid",
plain.ascii = F,
justify = "left",
header.style="setext",
use.hyphening=T,
caption = 'Enquête Lime Survey')
pandoc.table(GenerFI[,c(1:2,5)],style = "grid",
plain.ascii = F,
justify = "left",
header.style="setext",
split.cells = c(4, 8, 100),
use.hyphening=T,
caption = 'Enquête Lime Survey')
pandoc.table(GenerFI[,c(1:2,5)],style = "grid",
plain.ascii = F,
justify = "left",
header.style="setext",
split.cells = c(15, 15, 70),
use.hyphening=T,
caption = 'Enquête Lime Survey')
pandoc.table(GenerFI[,c(1:2,5)],style = "grid",
plain.ascii = F,
justify = "left",
header.style="setext",
split.cells = c(15, 15, 70),
use.hyphening=T,
emphasize.rownames=T,
caption = 'Enquête Lime Survey')
pandoc.table(GenerFI[,c(1:2,5)],style = "grid",
plain.ascii = F,
justify = "left",
header.style="setext",
split.cells = c(15, 15, 70),
use.hyphening=T,
emphasize.rownames=F,
caption = 'Enquête Lime Survey')
pandoc.table(GenerFI[,c(1:2,5)],style = "grid",
plain.ascii = F,
justify = "left",
split.cells = c(15, 15, 70),
use.hyphening=T,
emphasize.rownames=F)
pandoc.table(GenerFI[,c(1:2,5)],style = "grid",
plain.ascii = F,
justify = "left",
split.cells = c(15, 15, 70),
use.hyphening=T)
GenerFI <- FI %>%
filter(IdAgent == ListFI[i])
ListFISupH <- unique(GenerFI$IdAgentBySupH)
names(GenerFI)[c(1:2,5,8)]<- c("Nom agent","Prénom agent","Formations demandées","Service N+1 & Identif")
Nom <- unique(GenerFI$`Nom agent`)
Prenom <- unique(GenerFI$`Prénom agent`)
Service <- unique(GenerFI$`Service Agent`)
Groupe <- unique(GenerFI$`Groupe Agent`)
rmarkdown::render(input = paste0(CheminPgm,"Rmd_FichesIndiv.Rmd"),
output_format ="word_document",
output_dir = paste0(Chemin,"Donnees/OutPuts/Fiches individuelles de formation"),
output_file = paste0(ListFISupH,".doc"),
encoding = "UTF-8")
GenerFI <- FI %>%
filter(IdAgent == ListFI[i])
ListFISupH <- unique(GenerFI$IdAgentBySupH)
names(GenerFI)[c(1:2,5,8)]<- c("Nom agent","Prénom agent","Formations demandées","Service N+1 & Identif")
Nom <- unique(GenerFI$`Nom agent`)
Prenom <- unique(GenerFI$`Prénom agent`)
Service <- unique(GenerFI$`Service Agent`)
Groupe <- unique(GenerFI$`Groupe Agent`)
rmarkdown::render(input = paste0(CheminPgm,"Rmd_FichesIndiv.Rmd"),
output_format ="word_document",
output_dir = paste0(Chemin,"Donnees/OutPuts/Fiches individuelles de formation"),
output_file = paste0(ListFISupH,".doc"),
encoding = "UTF-8")
?kable
kable(GenerFI[,c(1:2,5)], format = "markdown")
kable(GenerFI[,c(1:2,5)], format = "html")
kable(GenerFI[,c(1:2,5)], format = "latex")
kable(GenerFI[,c(1:2,5)], format = "markdown", padding = 2)
GenerFI <- FI %>%
filter(IdAgent == ListFI[i])
ListFISupH <- unique(GenerFI$IdAgentBySupH)
names(GenerFI)[c(1:2,5,8)]<- c("Nom agent","Prénom agent","Formations demandées","Service N+1 & Identif")
Nom <- unique(GenerFI$`Nom agent`)
Prenom <- unique(GenerFI$`Prénom agent`)
Service <- unique(GenerFI$`Service Agent`)
Groupe <- unique(GenerFI$`Groupe Agent`)
rmarkdown::render(input = paste0(CheminPgm,"Rmd_FichesIndiv.Rmd"),
output_format ="word_document",
output_dir = paste0(Chemin,"Donnees/OutPuts/Fiches individuelles de formation"),
output_file = paste0(ListFISupH,".doc"),
encoding = "UTF-8")
GenerFI <- FI %>%
filter(IdAgent == ListFI[i])
ListFISupH <- unique(GenerFI$IdAgentBySupH)
names(GenerFI)[c(1:2,5,8)]<- c("Nom agent","Prénom agent","Formations demandées","Service N+1 & Identif")
Nom <- unique(GenerFI$`Nom agent`)
Prenom <- unique(GenerFI$`Prénom agent`)
Service <- unique(GenerFI$`Service Agent`)
Groupe <- unique(GenerFI$`Groupe Agent`)
rmarkdown::render(input = paste0(CheminPgm,"Rmd_FichesIndiv.Rmd"),
output_format ="word_document",
output_dir = paste0(Chemin,"Donnees/OutPuts/Fiches individuelles de formation"),
output_file = paste0(ListFISupH,".doc"),
encoding = "UTF-8")
kable(GenerFI[,c(1:2,5)], format = "pandoc", padding = 2)
x = kable(mtcars, format = "html")
cat(x, sep = "\n")
kable(GenerFI[,c(1:2,5)], format = "rst", padding = 2)
?pander
pander(GenerFI[,c(1:2,5)])
pander(density(runif(10)))
kable(GenerFI[,c(1:2,5)], format = "markdown", padding = 2)
kable(GenerFI[,c(1:2,5)], format = "markdown", padding = 5)
kable(GenerFI[,c(1:2,5)], format = "markdown")
kable(GenerFI[,c(1:2,5)], format = "markdown", padding = 10)
kable(GenerFI[,c(1:2,5)], format = "markdown", padding = 1)
?kableExtra
?xtable
xtable::(GenerFI[,c(1:2,5)], format = "markdown", padding = 1)
xtable(GenerFI[,c(1:2,5)], format = "markdown", padding = 1)
GenerFI <- FI %>%
filter(IdAgent == ListFI[i])
ListFISupH <- unique(GenerFI$IdAgentBySupH)
names(GenerFI)[c(1:2,5,8)]<- c("Nom agent","Prénom agent","Formations demandées","Service N+1 & Identif")
Nom <- unique(GenerFI$`Nom agent`)
Prenom <- unique(GenerFI$`Prénom agent`)
Service <- unique(GenerFI$`Service Agent`)
Groupe <- unique(GenerFI$`Groupe Agent`)
rmarkdown::render(input = paste0(CheminPgm,"Rmd_FichesIndiv.Rmd"),
output_format ="word_document",
output_dir = paste0(Chemin,"Donnees/OutPuts/Fiches individuelles de formation"),
output_file = paste0(ListFISupH,".doc"),
encoding = "UTF-8")
GenerFI <- FI %>%
filter(IdAgent == ListFI[i])
ListFISupH <- unique(GenerFI$IdAgentBySupH)
names(GenerFI)[c(1:2,5,8)]<- c("Nom agent","Prénom agent","Formations demandées","Service N+1 & Identif")
Nom <- unique(GenerFI$`Nom agent`)
Prenom <- unique(GenerFI$`Prénom agent`)
Service <- unique(GenerFI$`Service Agent`)
Groupe <- unique(GenerFI$`Groupe Agent`)
rmarkdown::render(input = paste0(CheminPgm,"Rmd_FichesIndiv.Rmd"),
output_format ="word_document",
output_dir = paste0(Chemin,"Donnees/OutPuts/Fiches individuelles de formation"),
output_file = paste0(ListFISupH,".doc"),
encoding = "UTF-8")
GenerFI <- FI %>%
filter(IdAgent == ListFI[i])
ListFISupH <- unique(GenerFI$IdAgentBySupH)
names(GenerFI)[c(1:2,5,8)]<- c("Nom agent","Prénom agent","Formations demandées","Service N+1 & Identif")
Nom <- unique(GenerFI$`Nom agent`)
Prenom <- unique(GenerFI$`Prénom agent`)
Service <- unique(GenerFI$`Service Agent`)
Groupe <- unique(GenerFI$`Groupe Agent`)
rmarkdown::render(input = paste0(CheminPgm,"Rmd_FichesIndiv.Rmd"),
output_format ="word_document",
output_dir = paste0(Chemin,"Donnees/OutPuts/Fiches individuelles de formation"),
output_file = paste0(ListFISupH,".doc"),
encoding = "UTF-8")
GenerFI <- FI %>%
filter(IdAgent == ListFI[i])
ListFISupH <- unique(GenerFI$IdAgentBySupH)
names(GenerFI)[c(1:2,5,8)]<- c("Nom agent","Prénom agent","Formations demandées","Service N+1 & Identif")
Nom <- unique(GenerFI$`Nom agent`)
Prenom <- unique(GenerFI$`Prénom agent`)
Service <- unique(GenerFI$`Service Agent`)
Groupe <- unique(GenerFI$`Groupe Agent`)
rmarkdown::render(input = paste0(CheminPgm,"Rmd_FichesIndiv.Rmd"),
output_format ="word_document",
output_dir = paste0(Chemin,"Donnees/OutPuts/Fiches individuelles de formation"),
output_file = paste0(ListFISupH,".doc"),
encoding = "UTF-8")
GenerFI <- FI %>%
filter(IdAgent == ListFI[i])
ListFISupH <- unique(GenerFI$IdAgentBySupH)
names(GenerFI)[c(1:2,5,8)]<- c("Nom agent","Prénom agent","Formations demandées","Service N+1 & Identif")
Nom <- unique(GenerFI$`Nom agent`)
Prenom <- unique(GenerFI$`Prénom agent`)
Service <- unique(GenerFI$`Service Agent`)
Groupe <- unique(GenerFI$`Groupe Agent`)
rmarkdown::render(input = paste0(CheminPgm,"Rmd_FichesIndiv.Rmd"),
output_format ="word_document",
output_dir = paste0(Chemin,"Donnees/OutPuts/Fiches individuelles de formation"),
output_file = paste0(ListFISupH,".doc"),
encoding = "UTF-8")
GenerFI <- FI %>%
filter(IdAgent == ListFI[i])
ListFISupH <- unique(GenerFI$IdAgentBySupH)
names(GenerFI)[c(1:2,5,8)]<- c("Nom agent","Prénom agent","Formations demandées","Service N+1 & Identif")
Nom <- unique(GenerFI$`Nom agent`)
Prenom <- unique(GenerFI$`Prénom agent`)
Service <- unique(GenerFI$`Service Agent`)
Groupe <- unique(GenerFI$`Groupe Agent`)
rmarkdown::render(input = paste0(CheminPgm,"Rmd_FichesIndiv.Rmd"),
output_format ="word_document",
output_dir = paste0(Chemin,"Donnees/OutPuts/Fiches individuelles de formation"),
output_file = paste0(ListFISupH,".doc"),
encoding = "UTF-8")
# for (i in 1:length(ListFI)){
GenerFI <- FI %>%
filter(IdAgent == ListFI[i])
ListFISupH <- unique(GenerFI$IdAgentBySupH)
names(GenerFI)[c(1:2,5,8)]<- c("Nom agent","Prénom agent","Formations demandées","Service N+1 & Identif")
Nom <- unique(GenerFI$`Nom agent`)
Prenom <- unique(GenerFI$`Prénom agent`)
Service <- unique(GenerFI$`Service Agent`)
Groupe <- unique(GenerFI$`Groupe Agent`)
rmarkdown::render(input = paste0(CheminPgm,"Rmd_FichesIndiv.Rmd"),
output_format ="word_document",
output_dir = paste0(Chemin,"Donnees/OutPuts/Fiches individuelles de formation"),
output_file = paste0(ListFISupH,".doc"),
encoding = "UTF-8")
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm/Archives/Pgms en cours de test')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
source("V:/Planpreform/Applicatif/Pgm/Paramétrage.R")
getwd()
getwd()
getwd()
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
getwd()
runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
setwd(paste0(CheminTravail,"Utilisateurs/"))
CheminTravail <- "V:/Planpreform/"
setwd(paste0(CheminTravail,"Utilisateurs/"))
CheminPkg <- paste0(CheminTravail,"Applicatif/Packages/")
CheminPgm <- paste0(CheminTravail,"Applicatif/Pgm/")
runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
install.packages("DT")
install.packages("htmlwidgets")
library("DT", lib.loc="U:/Mes documents/R/win-library/3.3")
version
library("DT", lib.loc="U:/Mes documents/R/win-library/3.3")
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
library(xlsx)
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm/Maintenance en cours 02022018')
runApp('V:/Planpreform/Applicatif/Pgm/Maintenance en cours 02022018')
install.packages("DT")
install.packages("htmltools")
shiny::runApp('V:/Planpreform/Applicatif/Pgm/Maintenance en cours 02022018')
runApp('V:/Planpreform/Applicatif/Pgm/Maintenance en cours 02022018')
runApp('V:/Planpreform/Applicatif/Pgm/Maintenance en cours 02022018')
runApp('V:/Planpreform/Applicatif/Pgm/Maintenance en cours 02022018')
shiny::runApp('V:/Planpreform/Applicatif/Pgm/Maintenance en cours 02022018')
runApp('V:/Planpreform/Applicatif/Pgm/Maintenance en cours 02022018')
install.packages("crosstalk")
runApp('V:/Planpreform/Applicatif/Pgm/Maintenance en cours 02022018')
runApp('V:/Planpreform/Applicatif/Pgm/Maintenance en cours 02022018')
sessionInfo()
version
.libPaths()
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
sessionInfo()
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
version
.libPaths()
.libPaths()
package_version("DT")
package_version(DT)
package_version(DT)
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
package_version(DT)
package_version("DT")
packageVersion("DT")
getRversion()
install.packages("DT")
packageVersion("DT")
getRversion()
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
packageVersion("htmltools")
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
packageVersion("htmltools")
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
packageVersion("htmltools")
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
shiny::runApp('V:/Planpreform/Applicatif/Pgm')
runApp('V:/Planpreform/Applicatif/Pgm/Maintenance en cours 02022018')
runApp('V:/Planpreform/Applicatif/Pgm/Maintenance en cours 02022018')
library(shiny); source('V:/Planpreform/Applicatif/Pgm/V2 en cours dev/runApp.R')
source('V:/Planpreform/Applicatif/Pgm/V2 en cours dev/runApp.R')
source('V:/Planpreform/Applicatif/Pgm/V2 en cours dev/runApp.R')
library(shiny); source('V:/Planpreform/Applicatif/Pgm/V2 en cours dev/runApp.R')
source('V:/Planpreform/Applicatif/Pgm/V2 en cours dev/runApp.R')
source('V:/Planpreform/Applicatif/Pgm/V2 en cours dev/runApp.R')
library(shiny); source('V:/Planpreform/Applicatif/Pgm/V2 en cours dev/runApp.R')
source('V:/Planpreform/Applicatif/Pgm/V2 en cours dev/runApp.R')
library(shiny); source('V:/Planpreform/Applicatif/Pgm/V2 en cours dev/runApp.R')
library(shiny); source('V:/Planpreform/Applicatif/Pgm/V2 en cours dev/runApp.R')
library(shiny); source('V:/Planpreform/Applicatif/Pgm/V2 en cours dev/runApp.R')
library(shiny); source('V2 en cours dev/runApp.R')
runApp('V2 en cours dev')
runApp('V2 en cours dev')
source('V2 en cours dev/runApp.R')
source('V2 en cours dev/runApp.R')
